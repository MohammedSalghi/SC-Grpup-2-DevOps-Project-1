// Copy this entire script into Jenkins "Pipeline script" definition

pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'mohammedsalghi24/sc-grpup-2-devops-project-1'
        BUILD_TAG = "${BUILD_NUMBER}"
        JIRA_ISSUE = 'SCRUM-11'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out code...'
                git branch: 'main', url: 'https://github.com/MohammedSalghi/SC-Grpup-2-DevOps-Project-1.git'
                echo "Build: ${BUILD_NUMBER}"
                echo "Commit: ${env.GIT_COMMIT}"
            }
        }
        
        stage('Extract Jira Issue') {
            steps {
                echo 'üé´ Extracting Jira issue from commit...'
                script {
                    def commitMessage = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                    echo "Commit message: ${commitMessage}"
                    
                    def jiraMatch = commitMessage =~ /\[([A-Z]+-\d+)\]/
                    if (jiraMatch) {
                        env.JIRA_ISSUE = jiraMatch[0][1]
                        echo "Found Jira issue: ${env.JIRA_ISSUE}"
                    } else {
                        echo "No Jira issue found in commit message"
                        env.JIRA_ISSUE = 'SCRUM-11'
                    }
                }
            }
        }
        
        stage('Quick Test') {
            steps {
                echo '‚ö° Running quick test...'
                echo "Build: ${BUILD_NUMBER}"
                echo "Jira: ${env.JIRA_ISSUE}"
                echo "Testing pipeline functionality..."
            }
        }
        
        stage('Create Results') {
            steps {
                echo 'üìä Creating test results...'
                writeFile file: 'simple-results.txt', text: "Build ${BUILD_NUMBER} completed successfully!\nJira Issue: ${env.JIRA_ISSUE}\nTimestamp: ${new Date()}"
                writeFile file: 'test-report.html', text: '''
                    <html>
                    <head><title>Pipeline Test Report</title></head>
                    <body>
                        <h1>üéâ Pipeline Test Report</h1>
                        <p><strong>Build:</strong> ''' + "${BUILD_NUMBER}" + '''</p>
                        <p><strong>Jira Issue:</strong> ''' + "${env.JIRA_ISSUE}" + '''</p>
                        <p><strong>Status:</strong> ‚úÖ SUCCESS</p>
                        <p><strong>Timestamp:</strong> ''' + "${new Date()}" + '''</p>
                        <h2>Test Results</h2>
                        <ul>
                            <li>‚úÖ Git checkout successful</li>
                            <li>‚úÖ Jira issue extraction working</li>
                            <li>‚úÖ Pipeline stages executing</li>
                            <li>‚úÖ Artifacts generation working</li>
                        </ul>
                    </body>
                    </html>
                '''
            }
        }
        
        stage('Archive Results') {
            steps {
                echo 'üì¶ Archiving results...'
                archiveArtifacts artifacts: 'simple-results.txt', allowEmptyArchive: true
                archiveArtifacts artifacts: 'test-report.html', allowEmptyArchive: true
                echo '‚úÖ Results archived successfully!'
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleanup complete'
        }
        success {
            echo 'üéâ Pipeline completed successfully!'
            echo "‚úÖ Build ${BUILD_NUMBER} for ${env.JIRA_ISSUE} finished"
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
    }
}
